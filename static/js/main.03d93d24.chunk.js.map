{"version":3,"sources":["components/NavigationBar.js","components/Header.js","components/Main.js","serviceWorker.js","index.js"],"names":["NavigationBar","class","role","id","href","Header","data-animate-effect","Main","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iNAmCeA,MAjCf,WACE,OACE,6BACE,6BACE,yBAAKC,MAAM,YAAYC,KAAK,cAC1B,yBAAKD,MAAM,YACT,yBAAKA,MAAM,aACT,yBAAKA,MAAM,OACT,yBAAKA,MAAM,YACT,yBAAKE,GAAG,cACN,uBAAGC,KAAK,KACN,kCAIN,yBAAKH,MAAM,+BACT,4BACE,wBAAIA,MAAM,WACR,uBAAGG,KAAK,gBCMfC,MAvBf,WACE,OACE,6BACE,4BAAQF,GAAG,eAAeF,MAAM,4BAA4BC,KAAK,UAC/D,yBAAKD,MAAM,YACX,yBAAKA,MAAM,aACT,yBAAKA,MAAM,OACT,yBAAKA,MAAM,wCACT,yBAAKA,MAAM,2BACT,yBACEA,MAAM,uCACNK,sBAAoB,UAEpB,sFCDHC,MAXf,WACE,OACE,yBAAKC,UAAU,QACb,yBAAKP,MAAM,iBACX,yBAAKE,GAAG,QACN,kBAAC,EAAD,MACA,kBAAC,EAAD,S,KCEYM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD6H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.03d93d24.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction NavigationBar() {\n  return (\n    <div>\n      <div>\n        <nav class=\"fh5co-nav\" role=\"navigation\">\n          <div class=\"top-menu\">\n            <div class=\"container\">\n              <div class=\"row\">\n                <div class=\"col-xs-2\">\n                  <div id=\"fh5co-logo\">\n                    <a href=\"#\">\n                      <span></span>\n                    </a>\n                  </div>\n                </div>\n                <div class=\"col-xs-10 text-right menu-1\">\n                  <ul>\n                    <li class=\"btn-cta\">\n                      <a href=\"#\">\n                        {/* login */}\n                        {/* <span></span> */}\n                      </a>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        </nav>\n      </div>\n    </div>\n  );\n}\nexport default NavigationBar;\n","import React from \"react\";\nimport NavigationBar from \"./NavigationBar\";\n\nfunction Header() {\n  return (\n    <div>\n      <header id=\"fh5co-header\" class=\"fh5co-cover js-fullheight\" role=\"banner\">\n        <div class=\"overlay\"></div>\n        <div class=\"container\">\n          <div class=\"row\">\n            <div class=\"col-md-8 col-md-offset-2 text-center\">\n              <div class=\"display-t js-fullheight\">\n                <div\n                  class=\"display-tc js-fullheight animate-box\"\n                  data-animate-effect=\"fadeIn\"\n                >\n                  <h1>Creativity Is A Wild Mind &amp; A Disciplined Eye!</h1>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\nexport default Header;\n","import React from \"react\";\nimport Header from \"./Header\";\nimport NavigationBar from \"./NavigationBar\";\n\nfunction Main() {\n  return (\n    <div className=\"Main\">\n      <div class=\"fh5co-loader\"></div>\n      <div id=\"page\">\n        <NavigationBar />\n        <Header />\n      </div>\n    </div>\n  );\n}\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Main from \"./components/Main\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Main />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}